<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    This file holds the (gui) settings for the %%MODULE_NAME%% module.
    Stuff in here will be used to satisfy configuring view behaviour, 
    for example the list view and the edit view.
    Settings that are tightly coupled to the structure or core-domain belong into the module.xml
    and shall be accessed via the corresponding (honeybee) module instance.
-->
<ae:configurations 
    xmlns:ae="http://agavi.org/agavi/config/global/envelope/1.0" 
    xmlns="http://agavi.org/agavi/config/parts/settings/1.0">
    <ae:configuration>
        <settings prefix="%%MODULE_PREFIX%%.">
            <!-- list integration {@see IListConfig} -->
            <setting name="list_config">
                <!-- common list params -->
                <ae:parameter name="defaultLimit">15</ae:parameter>
                <ae:parameter name="translationDomain">%%MODULE_PREFIX%%.list</ae:parameter>
                <ae:parameter name="pagingRange">9</ae:parameter>
                <ae:parameter name="routeName">%%MODULE_PREFIX%%.list</ae:parameter>
                <ae:parameter name="typeKey">%%MODULE_PREFIX%%</ae:parameter>
                <!-- enter your desire field for autosuggests here. 
                <ae:parameter name="suggestField">title</ae:parameter> -->

                <!--
                    define which list data shall be displayed
                    the names are fully qualified paths referring to values inside the list data
                
                <ae:parameter name="fields">
                    <ae:parameter name="title">
                        <ae:parameter name="valuefield">title</ae:parameter>
                        <ae:parameter name="sortfield">title.raw</ae:parameter>
                    </ae:parameter> 
                </ae:parameter> -->

                <!-- define our clientside controller along with some options -->
                <ae:parameter name="clientSideController">
                    <ae:parameter name="implementor">%%MODULE_NAME%%ListController</ae:parameter>
                    <ae:parameter name="options">
                        <!-- custom options to pass to the controller go here. -->
                    </ae:parameter>
                </ae:parameter>

                <!--
                    define the actions that are available for the list items and batch processing:
                    - you can choose to delegate actions to the workflow handler or the configured client-side controller
                    - actions are assigned using a simple invocation syntax refering to either the workflow handler or controller.
                    - whereas the workflow handler only provides a proceed and a run method, 
                      by changing the controller implementation you can easily pluck in new actions by extending the base controller.
                    by convention the first two parameters of your controller's action callbacks should always be "is_batch" and "item".
                -->
                <ae:parameter name="itemActions">
                    <ae:parameters>
                        <ae:parameter name="edit">ctrl.run(is_batch, item)</ae:parameter>
                        <ae:parameter name="delete">ctrl.proceed(is_batch, item, 'delete')</ae:parameter>
                    </ae:parameters>
                </ae:parameter>

                <ae:parameter name="batchActions">
                    <ae:parameters>
                        <ae:parameter name="delete">ctrl.proceed(is_batch, null, 'delete')</ae:parameter>
                    </ae:parameters>
                </ae:parameter>
            </setting>
            
        </settings>
    </ae:configuration>
</ae:configurations>

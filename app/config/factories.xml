<?xml version="1.0" encoding="UTF-8"?>
<ae:configurations xmlns:ae="http://agavi.org/agavi/config/global/envelope/1.0" xmlns="http://agavi.org/agavi/config/parts/factories/1.0">
    <ae:configuration>

        <controller class="AgaviController">
            <ae:parameter name="max_executions">100</ae:parameter>
        </controller>

        <database_manager class="AgaviDatabaseManager" />

        <dispatch_filter class="AgaviDispatchFilter" />

        <execution_container class="AgaviExecutionContainer" />

        <execution_filter class="Honeybee\Agavi\Filter\ExecutionFilter" />

        <filter_chain class="AgaviFilterChain" />

        <logger_manager class="Honeybee\Agavi\Logging\LoggerManager">
            <ae:parameter name="default_message_class">AgaviLoggerMessage</ae:parameter>
        </logger_manager>

        <request class="AgaviWebRequest">
            <!-- <ae:parameter name="method_names">
                <ae:parameter name="POST">create</ae:parameter>
                <ae:parameter name="GET">read</ae:parameter>
                <ae:parameter name="PUT">write</ae:parameter>
                <ae:parameter name="DELETE">remove</ae:parameter>
            </ae:parameter> -->
        </request>

        <response class="Honeybee\Agavi\Response\WebResponse">
            <ae:parameter name="send_content_length">false</ae:parameter> <!-- in HTTP 1.1 it's no longer necessary and in development var_dump() or similar could break correct content response length -->
            <ae:parameter name="expose_agavi">false</ae:parameter> <!-- disable X-Agavi header -->
            <!-- TODO: <ae:parameter name="use_sendfile_header">false</ae:parameter>
            <ae:parameter name="sendfile_header_name">false</ae:parameter> -->
        </response>

        <routing class="AgaviWebRouting">
            <!-- As we do not just output HTML with set base_href via PHP,
                 we need correct URLs that other services can consume. The
                 following allows direct inclusion of generated URLs in other
                 output types like JSON. It's not a problem as all variables
                 should be escaped according to their output type's needs. -->
            <ae:parameter name="default_gen_options">
                <ae:parameter name="separator">&amp;</ae:parameter>
                <ae:parameter name="relative">false</ae:parameter> <!-- it's more bytes over the wire, but a safer default for e.g. JSON APIs or HTML without base_href -->
            </ae:parameter>
        </routing>

        <security_filter class="AgaviSecurityFilter" />

        <storage class="AgaviSessionStorage">
            <ae:parameter name="session_name">honeybee_session</ae:parameter>

            <ae:parameter name="session_cache_limiter">nocache</ae:parameter> <!-- public | private | nocache | private_no_expire - when using private* the pre-check/post-check values are set to cache_expire time which is not that cool, so a custom ProjectWebResponse that sets headers may be appropriate -->
            <ae:parameter name="session_cache_expire">180</ae:parameter> <!-- in minutes; php default is 180 minutes -->

            <ae:parameter name="session_cookie_lifetime">+2 hours</ae:parameter> <!-- lifetime of the session cookie in seconds or strtotime() syntax -->
            <!-- <ae:parameter name="session_cookie_path">/</ae:parameter> --> <!-- path on the domain (single slash for all paths), defaults to base href in agavi -->
            <!-- <ae:parameter name="session_cookie_domain">www.example.com</ae:parameter> --> <!-- cookie domain (be careful with leading '.' as cookies are then visible to all subdomains) -->
            <!-- <ae:parameter name="session_cookie_secure">true</ae:parameter> --> <!-- true for secure connection cookie only, Agavi sets it to secure if request is https -->
            <!-- <ae:parameter name="session_cookie_httponly">true</ae:parameter> --> <!-- set httponly flag (beware of XMLHttpRequest issues) -->
        </storage>

        <user class="Honeybee\Agavi\User\ZendAclSecurityUser" />

        <translation_manager class="AgaviTranslationManager" />

        <validation_manager class="AgaviValidationManager" />
    </ae:configuration>



    <ae:configuration context="console">
        <request class="AgaviConsoleRequest">
            <ae:parameter name="read_stdin">on</ae:parameter>
            <ae:parameter name="stdin_file_name">stdin_buffer_filepath</ae:parameter>
        </request>
        <response class="AgaviConsoleResponse">
            <ae:parameter name="append_eol">false</ae:parameter>
        </response>
        <routing class="AgaviConsoleRouting" />
        <user class="Honeybee\Agavi\User\ZendAclSecurityUser" />
        <storage class="AgaviNullStorage"/>
    </ae:configuration>



    <ae:configuration context="web" environment="development.*">
        <execution_filter class="Honeybee\Agavi\Filter\DebugExecutionFilter" />
        <response class="Honeybee\Agavi\Response\WebResponse">
            <ae:parameter name="expose_agavi">true</ae:parameter>
        </response>
    </ae:configuration>



    <ae:configuration context="web" environment="testing.*">
        <execution_filter class="AgaviExecutionFilter">
            <ae:parameters>
                <ae:parameter name="enable_caching">false</ae:parameter>
            </ae:parameters>
        </execution_filter>
        <request class="AgaviWebRequest">
            <!-- static values for unit tests -->
            <ae:parameter name="sources">
                <ae:parameter name="HTTPS" />
                <ae:parameter name="REQUEST_METHOD">GET</ae:parameter>
                <ae:parameter name="SERVER_NAME">testing.berlinonline.de</ae:parameter>
                <ae:parameter name="SERVER_PORT">80</ae:parameter>
                <ae:parameter name="SERVER_PROTOCOL">HTTP/1.1</ae:parameter>
            </ae:parameter>
        </request>
    </ae:configuration>
</ae:configurations>
